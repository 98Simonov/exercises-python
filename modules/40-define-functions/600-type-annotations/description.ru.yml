---

name: Аннотации типов
theory: |

  **Аннотации типов** — это возможность указать типы параметров и возвращаемое значение у функции в Python. Это не является обязательным требованием языка, но может помочь программистам в дальнейшей разработке, улучшить читаемость кода и повысить его надежность.

  Давайте рассмотрим простой пример функции без аннотаций типов:
  
  ```python
  def concat(first, second):
      return first + second
  ```
  
  Эта функция конкатенирует две строки в одну. При этом с первого взгляда на код сложно понять, что происходит в нем: какие типы у аргументов, почему функция работает со строками, а не складывает, например, два числа.
  
  Если в дальнейшем использовать эту функцию в коде, то может возникнуть необходимость проверять типы аргументов перед передачей их в функцию, что увеличивает объем кода и затрудняет его понимание.
  
  Теперь давайте добавим аннотации типов к функции:
  
  ```pythons
  def concat(first: str, second: str) -> str:
      return first + second
  ```
  
  Здесь мы указали, что аргументы `first` и `second` должны быть строкового типа (`str`). Возвращаемое значение тоже будет строковым. Когда мы будем использовать эту функцию в коде, нам будет проще понять, какие типы аргументов можно передавать и какой тип возвращаемого значения ожидается.

  Аннотации типов также могут быть использованы для определения типов переменных внутри функции. Например:
  
  ```python
  def double(n: int) -> int:
      result: int = n * 2
      return result
  ```
  
  В этом примере мы определили тип переменной `result` как `int`, используя аннотацию типа.
  
  Аннотации типов — это не строгая проверка типов в Python. Их использование не гарантирует, что функция будет вызвана с аргументами и возвращаемым значением указанных типов. Все таки Python остается динамически типизированным языком. В нем аннотации типов не влияют на возможность передачи аргументов различных типов или возвращения значений других типов. Тем не менее их использование упрощает чтение и понимание кода и помогает отслеживать ошибки.

instructions: |

  Реализуйте функцию `letter_multiply()`. Она должна принимать три параметра:

  * Строку
  * Символ
  * Число, которое обозначает, сколько раз нужно повторить символ в слове

  ```python
  text = 'python'
  print(letter_multiply(text, 'p', 2)) # => ppython
  print(letter_multiply(text, 'y' 3)) # => pyyython
  print(letter_multiply(text, 'n', 4)) # => pythonnnn
  ```

  Укажите аннотации типов при объявлении функции.
