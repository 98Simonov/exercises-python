---

name: Optional Function Parameters
theory: |

  In programming, many functions and methods have parameters that rarely change. In such cases, these parameters are assigned default values that can be changed if necessary. This reduces the amount of duplicate code. Let's see how this works in practice.

  Let's consider an example:

  ```python
  # Exponentiation function
  # The second parameter has a default value of two
  def pow(x, base=2):
      return x ** base

  # Three to the second power (two is the default value)
  pow(3)  # 3 * 3 = 9
  # Three to the third power
  pow(3, 3)  # 3 * 3 * 3 = 27
  ```

  https://replit.com/@hexlet/python-basics-define-functions-default-parameters

  The default value looks like a regular assignment in the function definition. It only takes effect if the parameter is not passed.

  Imagine that you didn't bring spare parts for your car to the auto repair shop. In that case, the mechanic will suggest using the ones he has - by default.

  The default value can even be used when there is only one parameter:

  ```python
  def my_print(text='nothing'):
      print(text)

  my_print()  # => "nothing"
  my_print("Hexlet")  # => "Hexlet"
  ```

  There can be any number of parameters with default values:

  ```python
  def f(a=5, b=10, c=100):
  ```

  Default values have one limitation. They must come at the end of the parameter list. From a syntax point of view, it is impossible to create a function where a required parameter comes after an optional one:

  ```python
  # This code will result in an error
  def f(a=5, b=10, c=100, x):
  # And this one too
  def f(a=5, b=10, x, c=100):

  # This code will work
  def f(x, a=5, b=10, c=100):

  # This one will work too
  def f(x, y, a=5, b=10, c=100):
  ```

  Now you know how to work with default parameter values. They can be used for multiple parameters or just one. And remember, default values must come at the end of the parameter list. This knowledge will help reduce the amount of duplicate code.

instructions: |

  Implement the `get_hidden_card()` function, which takes a credit card number (consisting of 16 digits) as a string and returns its hidden version, which can be used on a website for display. If the original card had the number *2034399002125581*, then the hidden version looks like *\*\*\*\*5581*. In other words, the function replaces the first 12 characters with asterisks. The number of asterisks is controlled by the second optional parameter. The default value is 4.

  ```python
  # The credit card is passed as a string
  # The second parameter is not passed, so there will be 4 asterisks
  get_hidden_card('1234567812345678') # ****5678

  get_hidden_card('1234567812345678', 2) # **5678
  get_hidden_card('1234567812345678', 3) # ***5678

  # Or using variables

  card_number = '2034399002121100'
  get_hidden_card(card_number) # ****1100
  get_hidden_card(card_number, 1) # *1100
  ```

  To complete the task, you will need the string repetition mechanism, which repeats a string a specified number of times. To do this, simply multiply the string by the number of repetitions:

  ```python
  '+' * 5 # +++++
  'o' * 3 # ooo
  ```

tips:
  - |
    [Default Parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters)

definitions:
  - name: Default Parameter
    description: an optional function parameter