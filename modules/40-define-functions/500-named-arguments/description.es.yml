---

name: Argumentos Nombrados
theory: |

  En esta lección, vamos a analizar qué parámetros existen, cómo se diferencian y en qué casos se aplican.

  **Argumentos** son los datos que se pasan a una función cuando se la llama. Hay dos tipos de argumentos:

  El primer tipo son los **argumentos posicionales**. Se pasan en el mismo orden en el que se definen los parámetros de la función:

  ```python
  # (texto, longitud)
  truncar('Mi Texto', 3)
  ```

  El segundo tipo son los **argumentos nombrados**. Se pasan no solo como valores, sino como pares "nombre=valor". Por lo tanto, se pueden pasar en cualquier orden:

  ```python
  # Los argumentos se pasan en un orden diferente
  truncar(longitud=3, texto='Mi Texto')
  ```

  Si observamos cuidadosamente los dos ejemplos anteriores, podemos entender que son dos funciones idénticas.

  Ahora vamos a entender en qué casos se deben utilizar estos tipos de argumentos.

  La elección del tipo de parámetro depende de quién llama a la función.

  Hay dos razones para usar argumentos nombrados:

  * Mejoran la legibilidad, ya que los nombres son visibles de inmediato.

  * No es necesario especificar todos los parámetros intermedios que no necesitamos en este momento.

  Esto último es útil cuando una función tiene muchos parámetros opcionales. Veamos un ejemplo:

  ```python
  def imprimir_parametros(a=1, b=2, c=None, d=4):
      print(a, b, c, d)

  # Solo necesitamos pasar d, pero tenemos que pasar todos los demás
  f(1, 2, 3, 8)

  # Los argumentos nombrados nos permiten pasar solo d
  # Los valores predeterminados se utilizan para los demás argumentos
  f(d=8)
  ```

  Los argumentos nombrados se pueden pasar junto con los posicionales. En ese caso, los posicionales deben ir al principio:

  ```python
  # Pasamos solo a (posicional) y d (nombrado)
  f(3, d=3)
  ```

instructions: |

  Implementa la función `recortar_y_repetir()`, que recibe tres parámetros: una cadena de texto, `offset` - el número de caracteres que se deben recortar de la izquierda y `repetitions` - la cantidad de veces que se debe repetir la cadena recortada. La función recorta la cadena y la repite tantas veces como sea necesario para que el número total de cadenas recortadas sea igual a `repetitions`. La función debe guardar el resultado en una sola cadena y devolverla.
  El número de caracteres a recortar por defecto es 0 y el número de repeticiones es 1.

  ```python
  texto = 'python'
  print(recortar_y_repetir(texto, offset=3, repetitions=2)) # => honhon
  print(recortar_y_repetir(texto, repetitions=3)) # => pythonpythonpython
  print(recortar_y_repetir(texto)) # => python
  ```