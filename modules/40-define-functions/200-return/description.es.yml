---

name: Return Values
theory: |

    En esta lección vamos a profundizar sobre cómo trabajar con las funciones que han sido creadas para que sean estas sean útiles para los desarrolladores.

    Cuando definimos una función, esta imprime algunos datos en la pantalla:

    ```python
    def greeting():
        print('Hello, Hexlet!')
    ```

    Estas funciones tienen poca utilidad, ya que no se puede utilizar su resultado dentro del programa. Veámoslo en un ejemplo.

    Tomemos el caso de procesar un correo electrónico. Cuando un usuario se registra en un sitio web, puede ingresar su correo electrónico de diferentes maneras:

    * Agregar espacios en blanco al principio o al final: `_soporte@hexlet.io__`
    * Usar letras en diferentes formas de capitulación (minúscula o mayúscula): `SOPORTE@hexlet.io`

    Si lo guardamos en la base de datos con ese formato, el usuario no podrá iniciar sesión en el sitio web. Para evitar esto, es necesario preparar el correo electrónico antes de guardarlo en la base de datos: convertirlo a minúsculas y eliminar los espacios en blanco alrededor del texto. Esta tarea se puede resolver en un par de líneas:

    ```python
    def save_email():
        # El correo electrónico viene del formulario
        email = '  SuppORT@hexlet.IO'
        # Eliminamos los espacios en blanco
        trimmed_email = email.strip()
        prepared_email = trimmed_email.lower()
        print(prepared_email)
        # Aquí se realizaría el guardado en la base de datos
    ```

    Este código ha sido viable y posible gracias a que se devuelve de forma satisfactoria un valor. Los métodos `strip()` y `lower()` no imprimen nada en la pantalla, sino que **devuelven** el resultado de su trabajo. Por eso podemos asignar ese resultado a variables. Si imprimieran en la pantalla, no podríamos asignar el resultado a una variable. Por ejemplo, no podemos hacer esto con la función `greeting()`:

    ```python
    message = greeting()
    # en realidad, la función print() devuelve None
    # None es un objeto especial que se utiliza para representar la ausencia de valor
    print(message) # => None
    ```

    Ahora vamos a modificar la función `greeting()` para que devuelva datos. Para ello, en lugar de imprimir en la pantalla, utilizaremos la instrucción `return`:

    ```python
    def greeting():
        return 'Hello, Hexlet!'
    ```

    `return` es una instrucción que toma la expresión que se encuentra a su derecha y la devuelve al código que llamó al método. Aquí finaliza la ejecución de la función.

    ```python
    # Ahora podemos utilizar el resultado de la función
    message = greeting()
    print(message) # => Hello, Hexlet!
    # Incluso podemos realizar algunas acciones con el resultado
    print(message.upper()) # => HELLO, HEXLET!
    ```

    Any code after the `return` statement is not executed:

    ```python
    def greeting_with_code_after_return():
        return 'Hello, Hexlet!'
        print('I will never be executed')
    ```

    Even if a function returns data, it is not limited to just returning. Besides returning data, we can also print:

    ```python
    def greeting_with_return_and_printing():
        print('I will appear in the console')
        return 'Hello, Hexlet!'


    # Esto imprimirá el texto en la pantalla y devolverá un valor
    message = greeting_with_return_and_printing()
    ```

    No solo se puede devolver un valor específico. Dado que `return` funciona con expresiones, puede haber cualquier cosa a la derecha (o seguido) de él. En este caso, debemos seguir los principios de legibilidad del código:

    ```python
    def greeting():
        message = 'Hello, Hexlet!'
        return message
    ```

    Aquí no estamos devolviendo la variable en sí, sino el valor que se encuentra en esa variable. A continuación, un ejemplo con cálculos:

    ```python
    def double_five():
        # or return 5 + 5
        result = 5 + 5
        return result
    ```

    No es suficiente con definir una función. También es importante que sea útil y que se pueda utilizar su resultado. Ahora, piensa qué resultado devolverá la llamada a la función `run()` que se define a continuación.

    ```python
    # Definition
    def run():
        return 5
        return 10


    # What will be printed to the screen?
    print(run())
    ```

    https://replit.com/@hexlet/python-basics-define-functions-return

instructions: |

  Implementa la función `say_hurray_three_times()`, con el propósito de que devuelva la cadena 'hurray! hurray! hurray!'.

  ```python
  hurray = say_hurray_three_times()
  print(hurray) # => hurray! hurray! hurray!
  ```

tips:
  - |
    [return](https://www.w3schools.com/python/ref_keyword_return.asp)
