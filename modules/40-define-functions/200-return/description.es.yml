---

name: Return Values
theory: |

    In this lesson, we will take a closer look at how to work with created functions to make them useful.

    When we define a function, it prints some data to the screen:

    ```python
    def greeting():
        print('Hello, Hexlet!')
    ```

    Such functions are not very useful because their result cannot be used within the program. Let's consider an example.

    Let's take the task of processing an email. When a user registers on a website, they can enter their email in any way:

    * Add random spaces at the beginning or end: `_support@hexlet.io__`
    * Use letters in different cases: `SUPPORT@hexlet.io`

    If we save it in this form in the database, the user will not be able to log in to the website. To prevent this from happening, the email needs to be prepared for storage in the database: convert it to lowercase and trim any spaces at the edges of the string. This task can be solved in just a few lines of code:

    ```python
    def save_email():
        # Email comes from the form
        email = '  SuppORT@hexlet.IO'
        # Trim whitespace characters
        trimmed_email = email.strip()
        prepared_email = trimmed_email.lower()
        print(prepared_email)
        # Database write will be done here
    ```

    This code became possible because a value was returned. The `strip()` and `lower()` methods do not print anything to the screen, they **return** the result of their work. That's why we can assign the result to variables. We cannot do the same with the `greeting()` function:

    ```python
    message = greeting()
    # In reality, the print() function returns None
    # None is a special object used to represent the absence of a value
    print(message) # => None
    ```

    Now let's modify the `greeting()` function to return data instead of printing it. To do this, we will use the `return` statement instead of the print statement:

    ```python
    def greeting():
        return 'Hello, Hexlet!'
    ```

    `return` is an instruction. It takes the expression on the right side and passes it to the code that called the method. The execution of the function ends here.

    ```python
    # Now we can use the result of the function
    message = greeting()
    print(message) # => Hello, Hexlet!
    # And even perform some actions on the result
    print(message.upper()) # => HELLO, HEXLET!
    ```

    Any code after the `return` statement is not executed:

    ```python
    def greeting_with_code_after_return():
        return 'Hello, Hexlet!'
        print('I will never be executed')
    ```

    Even if a function returns data, it is not limited to just returning. Besides returning data, we can also print:

    ```python
    def greeting_with_return_and_printing():
        print('I will appear in the console')
        return 'Hello, Hexlet!'


    # It will print the text to the screen and return a value
    message = greeting_with_return_and_printing()
    ```

    It is possible to return not only a specific value. Since `return` works with expressions, anything can be on the right side of it. In this case, readability principles should be followed:

    ```python
    def greeting():
        message = 'Hello, Hexlet!'
        return message
    ```

    Here, we are not returning the variable itself. We always return the value that is stored in this variable. Below is an example with calculations:

    ```python
    def double_five():
        # or return 5 + 5
        result = 5 + 5
        return result
    ```

    It is not enough to define a function. It is also important for it to be useful and for its result to be usable. Now, think about what the call to the `run()` function defined below will return?

    ```python
    # Definition
    def run():
        return 5
        return 10


    # What will be printed to the screen?
    print(run())
    ```

    https://replit.com/@hexlet/python-basics-define-functions-return

instructions: |

  Implement the `say_hurray_three_times()` function, which returns the string 'hurray! hurray! hurray!'.

  ```python
  hurray = say_hurray_three_times()
  print(hurray) # => hurray! hurray! hurray!
  ```

tips:
  - |
    [return](https://www.w3schools.com/python/ref_keyword_return.asp)