---

name: Números mágicos
theory: |

  Tomemos como ejemplo un programa que calcula el tipo de cambio de divisas:

  ```python
  cantidad_euros = 1000
  cantidad_dolares = cantidad_euros * 1.25  # 1250.0
  cantidad_rublos = cantidad_dolares * 60   # 75000.0

  print(cantidad_rublos)
  ```

  Desde el punto de vista del desarrollo profesional, este código no cumple con las "mejores prácticas".

  En este ejemplo, es difícil entender qué significan los números `60` y `1.25`. Imagina que tienes que trabajar con este código después de un mes o un año, será complicado. También será difícil para otros programadores que no hayan visto el código antes.

  En nuestro ejemplo, es fácil deducir el contexto porque las variables están nombradas correctamente. Pero en proyectos reales, el código es mucho más complejo, por lo que a menudo es imposible adivinar el significado de los números.

  El problema radica en los "números mágicos" — magic numbers. Estos son números cuyo origen no se puede entender a simple vista, es necesario profundizar en lo que sucede en el código.

  Para evitar este problema, es necesario crear variables con nombres adecuados. Así todo encajará en su lugar:

  ```python
  dolares_por_euro = 1.25
  rublos_por_dolar = 60

  cantidad_euros = 1000
  cantidad_dolares = cantidad_euros * dolares_por_euro     # 1250.0
  cantidad_rublos = cantidad_dolares * rublos_por_dolar  # 75000.0

  print(cantidad_rublos)
  ```

  En este programa:

  * Se utiliza la convención de nombres snake_case
  * Las dos nuevas variables se separan de los cálculos posteriores con una línea en blanco. Estas variables tienen sentido incluso sin los cálculos, por lo que esta separación es apropiada ya que mejora la legibilidad.
  * El código resultante es bien nombrado y estructurado, pero es más largo que la versión anterior. Esto ocurre a menudo y es normal, ya que el código debe ser legible.

  Los números mágicos y los nombres de variables confusos no rompen el código, pero lo hacen menos legible.

  Es importante entender que la computadora ejecutará el cálculo especificado de todas formas. Sin embargo, otro programador que lea el código no entenderá nada, lo que dificultará el trabajo. Nombrar adecuadamente las variables es la mitad del éxito en el análisis del código.

instructions: |

  Te has encontrado con este código que muestra en pantalla la cantidad total de habitaciones en posesión del actual rey:

  ```python
  rey = "Habitaciones en el castillo del rey Balon:"
  print(rey)
  print(6 * 17)
  ```

  Como puedes ver, estos son números mágicos: no está claro qué significa el 6 y qué significa el 17. Se puede adivinar si se conoce la historia de la familia real: cada nuevo rey hereda todos los castillos de sus antepasados y construye un nuevo castillo, una copia exacta del castillo de sus padres.

  Esta extraña dinastía simplemente reproduce castillos idénticos...

  Elimina los números mágicos creando nuevas variables y luego muestra el texto en pantalla.

  El resultado debería ser:

  <pre class='hexlet-basics-output'>
  Habitaciones en el castillo del rey Balon:
  102
  </pre>

  Los nombres de las variables deben transmitir el significado de los números, pero al mismo tiempo deben ser lo suficientemente cortos y concisos para una lectura cómoda.

  Recuerda: el código funcionará con cualquier nombre, y nuestro sistema siempre verifica solo el resultado en pantalla, por lo que completar esta tarea es tu responsabilidad.

tips: 
  - |
    [Números mágicos](https://es.wikipedia.org/wiki/N%C3%BAmero_m%C3%A1gico_(programaci%C3%B3n))